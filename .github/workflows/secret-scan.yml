name: secret-scan
on:
  workflow_dispatch:
  pull_request:

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks (official action)
        id: gitleaks_action
        continue-on-error: true
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml

      - name: Install gitleaks CLI (only on failure)
        if: ${{ steps.gitleaks_action.outcome == 'failure' }}
        run: |
          set -euo pipefail
          ver="8.24.3"
          curl -fsSL -o gitleaks.tgz "https://github.com/zricethezav/gitleaks/releases/download/v${ver}/gitleaks_${ver}_linux_x64.tar.gz"
          tar -xzf gitleaks.tgz
          sudo mv gitleaks /usr/local/bin/gitleaks
          gitleaks version

      - name: Generate JSON report (only on failure)
        if: ${{ steps.gitleaks_action.outcome == 'failure' }}
        run: |
          set -euo pipefail
          gitleaks detect             --config=.gitleaks.toml             --redact             --report-format json             --report-path gitleaks-report.json             --exit-code 1 || true
          test -s gitleaks-report.json && echo "Report written."

      - name: Upload report
        if: ${{ steps.gitleaks_action.outcome == 'failure' && hashFiles('gitleaks-report.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

      - name: Create triage issue
        if: ${{ steps.gitleaks_action.outcome == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const title = `Secret leak detected in ${context.repo.owner}/${context.repo.repo}@${process.env.GITHUB_SHA}`;
            const body = [
              'A secrets scan failed.',
              '',
              `- Commit: \`${process.env.GITHUB_SHA}\``,
              `- Actor: ${process.env.GITHUB_ACTOR}`,
              `- Run: ${runUrl}`,
              '',
              'Please follow the revocation playbook and add detection and fix times.'
            ].join('\n');
            const { data } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body
            });
            core.info(`Opened issue #${data.number}`);

      - name: Summarize results
        if: always()
        run: |
          {
            echo "## Gitleaks summary"
            if [ "${{ steps.gitleaks_action.outcome }}" = "failure" ]; then
              echo "❌ Leaks found. An issue was opened and, if available, a JSON report was uploaded as an artifact."
            else
              echo "✅ No leaks detected."
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Fail if leaks found
        if: ${{ steps.gitleaks_action.outcome == 'failure' }}
        run: exit 1
